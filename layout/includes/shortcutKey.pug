- shortcutKeyDelay = theme.shortcutKey.delay ? theme.shortcutKey.delay : 100
- shortcutKeyShiftDelay = theme.shortcutKey.shiftDelay ? theme.shortcutKey.shiftDelay : 200
#keyboard-tips(class='')
  .keyboardTitle 博客快捷键
  .keybordList
    each item in ["K 关闭快捷键功能", "A 打开中控台", "M 播放/暂停音乐", "D 深色/浅色显示模式", "S 站内搜索", "R 随机访问", "H 返回首页", "F 友链鱼塘", "L 友链页面", "P 关于本站", "I 原版右键菜单"]
      - let key = item.split(" ")[0]
      - let content = item.split(" ")[1]
      .keybordItem
        .keyGroup
          .key= "shift " + key
        .keyContent
          .content= content

script.
  var anzhiyu_intype = false
  var anzhiyu_keyUpEvent_timeoutId = null
  var anzhiyu_keyUpShiftDelayEvent_timeoutId = null
  // 是否开启快捷键
  anzhiyu_keyboard = localStorage.getItem("keyboardToggle") ? localStorage.getItem("keyboardToggle") : false;
  function addKeyShotListener() {
    const windowObject = window;
    windowObject.removeEventListener("keydown", keyDownEvent);
    windowObject.removeEventListener("keyup", keyUpEvent);
    windowObject.addEventListener("keydown", keyDownEvent);
    windowObject.addEventListener("keyup", keyUpEvent);
  }

  function keyDownEvent(event) {
    const isEscapeKeyPressed = event.keyCode === 27;
    const isShiftKeyPressed = event.shiftKey;
    const isKeyboardEnabled = anzhiyu_keyboard;
    const isInInputField = anzhiyu_intype;

    if (isEscapeKeyPressed) {
      anzhiyu.hideLoading();
      anzhiyu.hideConsole();
      rm.hideRightMenu();
    }

    if (isKeyboardEnabled && isShiftKeyPressed && !isInInputField) {
      anzhiyu_keyUpShiftDelayEvent_timeoutId = setTimeout(()=>{
        switch (event.keyCode) {
          case 16:
            anzhiyu_keyUpEvent_timeoutId = setTimeout(()=>{
              document.querySelector("#keyboard-tips").classList.add("show");
            }, #{shortcutKeyShiftDelay});
            break;
          case 65:
            anzhiyu.showConsole();
            break;
          case 77:
            anzhiyu.musicToggle();
            break;
          case 75:
            anzhiyu.keyboardToggle();
            break;
          case 73:
            anzhiyu.rightMenuToggle();
            break;
          case 82:
            toRandomPost();
            break;
          case 72:
            pjax.loadUrl("/");
            break;
          case 68:
            anzhiyu.switchDarkMode();
            break;
          case 70:
            pjax.loadUrl("/fcircle/");
            break;
          case 76:
            pjax.loadUrl("/link/");
            break;
          case 80:
            pjax.loadUrl("/about/");
            break;
          default:
            break;
        }

        event.preventDefault();
      }, #{shortcutKeyDelay});
    }
  }

  addKeyShotListener();

  window.onfocus = function() {
    document.getElementById("keyboard-tips").classList.remove("show")
  }

  function setInputFocusListener() {
    const inputs = document.querySelectorAll("input, textarea");

    inputs.forEach((input) => {
      input.addEventListener("focus", () => {
        setAnzhiyuIntype(true);
      });

      input.addEventListener("blur", () => {
        setAnzhiyuIntype(false);
      });
    });
  }

  function setanzhiyuIntype(value) {
    anzhiyu_intype = value;
  }

  function keyUpEvent(event) {
    anzhiyu_keyUpEvent_timeoutId && clearTimeout(anzhiyu_keyUpEvent_timeoutId);
    anzhiyu_keyUpShiftDelayEvent_timeoutId && clearTimeout(anzhiyu_keyUpShiftDelayEvent_timeoutId);
    if (event.keyCode === 16) {
      const keyboardTips = document.querySelector("#keyboard-tips");
      keyboardTips.classList.remove("show");
    }
  }

  function listenToPageInputPress() {
    const inputElement = document.getElementById("toPageText");
    const buttonElement = document.getElementById("toPageButton");

    if (!inputElement) {
      return;
    }

    inputElement.addEventListener("keydown", (event) => {
      if (event.keyCode === 13) {
        event.preventDefault();
        anzhiyu.toPage();
        pjax.loadUrl(buttonElement.href);
      }
    });

    inputElement.addEventListener("input", () => {
      const value = inputElement.value;
      if (!value || value === "0") {
        buttonElement.classList.remove("haveValue");
      } else {
        buttonElement.classList.add("haveValue");
      }

      const pageNumbers = document.querySelectorAll(".page-number");
      const maxPageNumber = +pageNumbers[pageNumbers.length - 1].innerHTML;

      if (+value > maxPageNumber) {
        inputElement.value = maxPageNumber;
      }
    });
  }

  setInputFocusListener()
